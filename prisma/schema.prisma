// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  emailVerified DateTime?
  password      String? // for email/password authentication
  googleId      String?   @unique
  role          String    @default("member") // member, admin
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Spotify integration
  spotifyAccessToken  String?
  spotifyRefreshToken String?
  spotifyTokenExpiry  DateTime?

  // Push notifications
  pushSubscription String? // JSON string containing push subscription data
  pushEnabled      Boolean @default(false)

  // Relations
  accounts            Account[]
  sessions            Session[]
  couple              Couple?          @relation(fields: [coupleId], references: [id])
  coupleId            String?
  images              Image[]
  memories            Memory[]
  ideas               Ideas[]
  notifications       Notification[]
  momentsInitiated    Moment[]         @relation("MomentInitiator")
  momentsParticipated Moment[]         @relation("MomentParticipant")
  analyticsEvents     AnalyticsEvent[]
  sharedLinks         SharedLink[]

  @@index([email])
  @@index([coupleId])
  @@map("users")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Couple model for managing couples
model Couple {
  id          String    @id @default(cuid())
  name        String?
  inviteCode  String    @unique
  anniversary DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  users           User[]
  memories        Memory[]
  ideas           Ideas[]
  challenges      Challenge[]
  moments         Moment[]
  notifications   Notification[]
  analyticsEvents AnalyticsEvent[]
  countdowns      Countdown[]
  journeys        Journey[]

  // Couple settings
  settings Json?
  Image    Image[]

  @@map("couples")
}

// Countdown model for future events and anniversaries
model Countdown {
  id          String   @id @default(cuid())
  title       String
  description String?
  date        DateTime // The date of the event
  coupleId    String
  couple      Couple   @relation(fields: [coupleId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([coupleId])
  @@map("countdowns")
}

// Memory model for storing memories
model Memory {
  id           String   @id @default(cuid())
  title        String
  description  String?
  date         DateTime
  location     String?
  latitude     String? // Temporary: stored as text for SQLite compatibility  
  longitude    String? // Temporary: stored as text for SQLite compatibility
  category     String?
  mood         String?
  weather      Json? // Store weather data as JSON
  spotifyTrack Json? // Store Spotify track data as JSON
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  author      User            @relation(fields: [authorId], references: [id])
  authorId    String
  couple      Couple          @relation(fields: [coupleId], references: [id])
  coupleId    String
  images      Image[]
  videos      Video[]
  moments     Moment[]
  Ideas       Ideas[]
  journeys    JourneyMemory[]
  sharedLinks SharedLink[]

  @@index([coupleId])
  @@index([date])
  @@index([location])
  @@map("memories")
}

// Journey model to group memories into a travel route
model Journey {
  id          String   @id @default(cuid())
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  couple   Couple          @relation(fields: [coupleId], references: [id])
  coupleId String
  memories JourneyMemory[]

  @@index([coupleId])
  @@map("journeys")
}

// Explicit many-to-many relation table between Journey and Memory
model JourneyMemory {
  journey   Journey @relation(fields: [journeyId], references: [id], onDelete: Cascade)
  journeyId String
  memory    Memory  @relation(fields: [memoryId], references: [id], onDelete: Cascade)
  memoryId  String
  order     Int // To maintain the order of memories in a journey

  @@id([journeyId, memoryId])
  @@map("journey_memories")
}

// Model for creating shareable links for memories
model SharedLink {
  id        String    @id @default(cuid())
  token     String    @unique // The unique token for the shareable URL
  memoryId  String
  memory    Memory    @relation(fields: [memoryId], references: [id], onDelete: Cascade)
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  password  String? // Hashed password for protection
  expiresAt DateTime? // Optional expiration date for the link
  createdAt DateTime  @default(now())

  @@index([token])
  @@index([memoryId])
  @@map("shared_links")
}

// Image model for storing images and metadata
model Image {
  id                 String   @id @default(cuid())
  userId             String
  coupleId           String
  filename           String
  originalName       String
  path               String
  thumbnailPath      String
  category           String?
  size               Int
  width              Int
  height             Int
  createdAt          DateTime @default(now())
  livePhotoPath      String?
  livePhotoContentId String?  @unique
  momentId           String?
  memoryId           String?
  isCover            Boolean  @default(false)
  isFavorite         Boolean  @default(false)

  moment Moment? @relation(fields: [momentId], references: [id], onDelete: Cascade)
  memory Memory? @relation(fields: [memoryId], references: [id], onDelete: Cascade)
  author User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  couple Couple  @relation(fields: [coupleId], references: [id], onDelete: Cascade)
}

model Video {
  id                 String   @id @default(cuid())
  filename           String
  path               String
  size               Int
  duration           Int
  width              Int
  height             Int
  livePhotoContentId String?  @unique
  createdAt          DateTime @default(now())
  memoryId           String?
  memory             Memory?  @relation(fields: [memoryId], references: [id], onDelete: Cascade)
}

// Ideas model for storing future plans
model Ideas {
  id          String    @id @default(cuid())
  title       String
  description String?
  category    String?
  status      String    @default("pending") // pending, completed, discarded
  priority    String    @default("medium") // low, medium, high
  dueDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  author   User    @relation(fields: [authorId], references: [id])
  authorId String
  couple   Couple  @relation(fields: [coupleId], references: [id])
  coupleId String
  memory   Memory? @relation(fields: [memoryId], references: [id])
  memoryId String?

  @@index([coupleId])
  @@index([status])
  @@map("ideas")
}

// Challenge model for gamification
model Challenge {
  id          String   @id @default(cuid())
  title       String
  description String
  category    String
  points      Int
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  couple   Couple @relation(fields: [coupleId], references: [id])
  coupleId String

  @@map("challenges")
}

// Notification model for user alerts
model Notification {
  id        String   @id @default(cuid())
  type      String // e.g., 'new_memory', 'new_moment', 'challenge_completed'
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user     User   @relation(fields: [userId], references: [id])
  userId   String
  couple   Couple @relation(fields: [coupleId], references: [id])
  coupleId String

  // Optional link to a specific resource
  link String?

  @@index([userId])
  @@map("notifications")
}

// Moment model for real-time photo sharing
model Moment {
  id                 String       @id @default(cuid())
  initiatorId        String
  initiator          User         @relation("MomentInitiator", fields: [initiatorId], references: [id])
  participantId      String?
  participant        User?        @relation("MomentParticipant", fields: [participantId], references: [id])
  coupleId           String
  couple             Couple       @relation(fields: [coupleId], references: [id])
  status             MomentStatus @default(PENDING)
  expiresAt          DateTime
  initiatorImageId   String?
  participantImageId String?
  combinedImageId    String?
  memoryId           String?      @unique
  memory             Memory?      @relation(fields: [memoryId], references: [id])
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  images             Image[]

  @@index([coupleId, status])
  @@map("moments")
}

enum MomentStatus {
  PENDING
  ACCEPTED
  UPLOADING
  COMPLETED
  EXPIRED
  DECLINED
}

// Analytics model
model AnalyticsEvent {
  id        String   @id @default(cuid())
  type      String // e.g., 'login', 'memory_create', 'image_upload'
  details   Json?
  timestamp DateTime @default(now())

  // Relations
  userId   String
  user     User   @relation(fields: [userId], references: [id])
  coupleId String
  couple   Couple @relation(fields: [coupleId], references: [id])

  @@index([type])
  @@index([timestamp])
  @@map("analytics_events")
}

enum Role {
  MEMBER
  ADMIN
}
